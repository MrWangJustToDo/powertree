#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const yargs = require("yargs");
const powerTree = require("./powerTree.js");

// show version
try {
  if (Object.prototype.hasOwnProperty.call(yargs.argv, "v")) {
    const json = JSON.parse(
      fs.readFileSync(path.join(__dirname, "package.json"))
    );
    console.log("version:", json.version);
    return;
  }
} catch (e) {
  console.error(
    `miss 'package.json' file, pleace download powerTree again and do not delete this file`
  );
  return;
}

// show help
if (Object.prototype.hasOwnProperty.call(yargs.argv, "h")) {
  console.log(
    "usage: p-tree [path] [number(padWidth)] [-c(colorful)] [-e(extend)]"
  );
  return;
}

if (Object.prototype.hasOwnProperty.call(yargs.argv, "c")) {
  if (Object.prototype.hasOwnProperty.call(yargs.argv, "e")) {
    if (yargs.argv._.length == 0) {
      powerTree.listFiles(true, true, ".").then(console.log);
    } else {
      powerTree.listFiles(true, true, ...yargs.argv._).then(console.log);
    }
  } else {
    console.time("search ~~ ");
    if (yargs.argv._.length == 0) {
      powerTree.listFiles(true, false, ".").then(() => console.timeEnd("search ~~ "));
    } else {
      powerTree
        .listFiles(true, false, ...yargs.argv._)
        .then(() => console.timeEnd("search ~~ "));
    }
  }
} else {
  if (Object.prototype.hasOwnProperty.call(yargs.argv, "e")) {
    if (yargs.argv._.length == 0) {
      powerTree.listFiles(false, true, ".").then(console.log);
    } else {
      powerTree.listFiles(false, true, ...yargs.argv._).then(console.log);
    }
  } else {
    console.time("search ~~ ");
    if (yargs.argv._.length == 0) {
      powerTree
        .listFiles(false, false, ".")
        .then(() => console.timeEnd("search ~~ "));
    } else {
      powerTree
        .listFiles(false, false, ...yargs.argv._)
        .then(() => console.timeEnd("search ~~ "));
    }
  }
}
